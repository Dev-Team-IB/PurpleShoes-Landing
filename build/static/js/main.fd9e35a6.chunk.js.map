{"version":3,"sources":["pages/purple-shoes/chat/ChatEvent.ts","pages/purple-shoes/chat/index.tsx","pages/global/GlobalStyles.tsx","pages/purple-shoes/img/intro-title.png","pages/purple-shoes/Intro/Header.tsx","pages/purple-shoes/Intro/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatEvent","socket","GlobalStyle","createGlobalStyle","normalize","Header","Container","style","backgroundColor","justifyContent","paddingLeft","paddingRight","Grid","container","item","xs","type","value","src","TitleImg","height","fill","Intro","Chat","props","userId","queryString","parse","location","search","user","undefined","useState","state","setState","chatHistory","setChatHistory","sendMessage","emit","NEW_MESSAGE","useEffect","console","log","io","path","reconnectionDelayMax","query","on","CHAT_HISTROY","message","concat","onChange","e","target","onKeyDown","key","onClick","map","i","App","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAAYA,ECURC,E,sFCWWC,EAbKC,4BAAH,gIACbC,a,mCCTW,MAA0B,wC,OCqC1BC,EA/BA,WACb,OAIE,aAHA,CAGA,mBACE,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,gBAAiB,UACjBC,eAAgB,gBAChBC,YAAa,EACbC,aAAc,GALlB,SAQE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACN,MAAO,CAAEC,gBAAiB,UAA1C,UACE,cAACI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGR,MAAO,CAAEC,gBAAiB,OAA5C,SACE,uBAAOQ,KAAK,SAASC,MAAM,mBAE7B,cAACL,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIR,MAAO,CAAEE,eAAgB,UAA5C,SACE,qBAAKS,IAAKC,EAAUZ,MAAO,CAAEa,OAAQ,YAEvC,eAACR,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGR,MAAO,CAAEC,gBAAiB,OAA5C,UACE,uBAAOQ,KAAK,WACZ,cAAC,IAAD,CAAUT,MAAO,CAAEc,KAAM,sBChBtBC,EARD,WACZ,OACE,mCACE,cAAC,EAAD,O,oDLRMtB,K,wBAAAA,E,wBAAAA,E,0BAAAA,E,0BAAAA,E,4BAAAA,E,6BAAAA,M,KCYZ,IAkEeuB,EAlEF,SAACC,GACZ,IAAMC,EAASC,IAAYC,MAAMH,EAAMI,SAASC,QAAQC,KAExD,QAAcC,GAAVN,EACF,OAAO,qDAGT,MAA0BO,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAmB,IAAzD,mBAAOG,EAAP,KAAoBC,EAApB,KAYMC,EAAc,WACJ,KAAVJ,IACJhC,EAAOqC,KAAKtC,EAAUuC,YAAaN,GACnCC,EAAS,MA0BX,OAvBAM,qBAAU,WACRC,QAAQC,IAAI,kBAAmBjB,IAE/BxB,EAAS0C,IAAG,wBAAyB,CACnCC,KAAM,cACNC,qBAAsB,IACtBC,MAAO,CACLhB,KAAK,GAAD,OAAKL,OAGNsB,GAAG,WAAW,WACnBN,QAAQC,IAAI,qBACZzC,EAAOqC,KAAKtC,EAAUgD,iBAExB/C,EAAO8C,GAAG/C,EAAUuC,aAAa,SAACU,GAChCb,GAAe,SAACD,GAAD,OAAiBA,EAAYe,OAAOD,MACnDR,QAAQC,IAAIP,MAEdlC,EAAO8C,GAAG/C,EAAUgD,cAAc,iBAGjC,IAGD,qCACE,kDAAqBvB,KACrB,uBACET,KAAK,OACLC,MAAOgB,EACPkB,SAtCc,SAACC,GACnBlB,EAASkB,EAAEC,OAAOpC,QAsCdqC,UA5CkB,SAACF,GACV,SAATA,EAAEG,KACJlB,OA4CA,uBAAOrB,KAAK,SAASC,MAAM,eAAKuC,QAASnB,IAR3C,IAQ2D,uBAR3D,OASGF,QATH,IASGA,OATH,EASGA,EAAasB,KAAI,SAACL,EAAGM,GACpB,OAAO,8BAAcN,GAAJM,UKlDVC,MAdf,WACE,OAEE,cADA,CACC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOf,KAAK,IAAIgB,OAAK,EAACC,UAAWvC,IADnC,IAEE,cAAC,IAAD,CAAOsB,KAAK,SAASgB,OAAK,EAACC,UAAWvC,IAFxC,IAGE,cAAC,IAAD,CAAOsB,KAAK,QAAQgB,OAAK,EAACC,UAAWtC,IAHvC,WCCSuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fd9e35a6.chunk.js","sourcesContent":["export enum ChatEvent {\r\n  CONNECTION = \"connection\",\r\n  DISCONNECT = \"disconnect\",\r\n  NEW_MESSAGE = \"new_message\",\r\n  GET_MESSAGE = \"get_message\",\r\n  SEND_MESSAGE = \"send_message\",\r\n  CHAT_HISTROY = \"chat_history\",\r\n}\r\n","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport io, { Socket, Manager } from \"socket.io-client\";\r\nimport { ChatEvent } from \"./ChatEvent\";\r\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\r\n\r\ntype ChatType = {\r\n  list: [{ user: string; time: string; content: string }];\r\n};\r\n\r\nlet socket: Socket<DefaultEventsMap, DefaultEventsMap>;\r\n\r\nconst Chat = (props: any) => {\r\n  const userId = queryString.parse(props.location.search).user;\r\n\r\n  if (userId == undefined) {\r\n    return <>wrong room id</>;\r\n  }\r\n\r\n  const [state, setState] = useState(\"\");\r\n  const [chatHistory, setChatHistory] = useState<string[]>([]);\r\n\r\n  //https://socket.io/docs/v4/client-api/#event-connect\r\n\r\n  const KeyEventHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key == \"Enter\") {\r\n      sendMessage();\r\n    }\r\n  };\r\n  const stateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState(e.target.value);\r\n  };\r\n  const sendMessage = () => {\r\n    if (state === \"\") return;\r\n    socket.emit(ChatEvent.NEW_MESSAGE, state);\r\n    setState(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"entered room : \", userId);\r\n\r\n    socket = io(\"http://localhost:5000\", {\r\n      path: \"/socketchat\",\r\n      reconnectionDelayMax: 10000,\r\n      query: {\r\n        user: `${userId}`,\r\n      },\r\n    });\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"connection server\");\r\n      socket.emit(ChatEvent.CHAT_HISTROY);\r\n    });\r\n    socket.on(ChatEvent.NEW_MESSAGE, (message: string) => {\r\n      setChatHistory((chatHistory) => chatHistory.concat(message));\r\n      console.log(chatHistory);\r\n    });\r\n    socket.on(ChatEvent.CHAT_HISTROY, () => {\r\n      //send client to history\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>connected room {userId}</div>\r\n      <input\r\n        type=\"text\"\r\n        value={state}\r\n        onChange={stateChange}\r\n        onKeyDown={KeyEventHandler}\r\n      />\r\n      <input type=\"button\" value=\"전송\" onClick={sendMessage} /> <br />\r\n      {chatHistory?.map((e, i) => {\r\n        return <div key={i}>{e}</div>;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import { normalize } from \"styled-normalize\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\n/**\r\n * styled-normalize were used to match style compatibility between browsers.\r\n * https://www.npmjs.com/package/styled-normalize\r\n * https://styled-components.com/\r\n */\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n  \r\n  html,\r\n  body {\r\n    overflow: hidden;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export default __webpack_public_path__ + \"static/media/intro-title.37ecb331.png\";","import React from \"react\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport styled from \"styled-components\";\r\nimport TitleImg from \"../img/intro-title.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    // 작성시 주의 점\r\n    // style 문은 맨 뒤에 써주세요.\r\n    // 나중에 Styled-Component로 작업시 제거해야함.\r\n    <header>\r\n      <Container\r\n        style={{\r\n          backgroundColor: \"#022fff\",\r\n          justifyContent: \"space-between\",\r\n          paddingLeft: 0,\r\n          paddingRight: 0,\r\n        }}\r\n      >\r\n        <Grid container style={{ backgroundColor: \"yellow\" }}>\r\n          <Grid item xs={1} style={{ backgroundColor: \"red\" }}>\r\n            <input type=\"button\" value=\"Profile Icon\" />\r\n          </Grid>\r\n          <Grid item xs={10} style={{ justifyContent: \"center\" }}>\r\n            <img src={TitleImg} style={{ height: \"50px\" }} />\r\n          </Grid>\r\n          <Grid item xs={1} style={{ backgroundColor: \"red\" }}>\r\n            <input type=\"button\" />\r\n            <MenuIcon style={{ fill: \"white\" }} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport About from \"./About\";\r\nimport Home from \"./Home\";\r\nimport Header from \"./Header\";\r\n\r\nconst Intro = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GlobalStyle from \"./pages/global/GlobalStyles\";\r\nimport Intro from \"./pages/purple-shoes/Intro\";\r\nimport Chat from \"./pages/purple-shoes/chat\";\r\n\r\nfunction App() {\r\n  return (\r\n    // TODO:\r\n    <BrowserRouter>\r\n      <GlobalStyle />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Intro} />;\r\n        <Route path=\"/intro\" exact component={Intro} />;\r\n        <Route path=\"/chat\" exact component={Chat} />;\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}